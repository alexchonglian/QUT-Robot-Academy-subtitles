1
00:00:03,439 --> 00:00:07,500
我们讨论了如何线性插值位置。
We talked about how we can linearly interpolate position.

2
00:00:07,500 --> 00:00:10,660
我们如何处理轮换？
What do we do for the case of rotations?

3
00:00:10,660 --> 00:00:16,580
我们可以天真地重写我们的表达式，我们有初始旋转，即
We could naively rewrite our expression like this where we have the initial rotation, the

4
00:00:16,580 --> 00:00:19,380
最终旋转和中间旋转。
final rotation and the intermediate rotation.

5
00:00:19,380 --> 00:00:21,960
但是，这个方案存在问题。
But, there’s a problem with this scheme.

6
00:00:21,960 --> 00:00:25,620
旋转矩阵不仅仅是任何旧的3x3矩阵。
A rotation matrix is not just any old 3 x 3 matrix.

7
00:00:25,620 --> 00:00:27,100
这是一个特殊的矩阵。
It’s a special matrix.

8
00:00:27,100 --> 00:00:32,990
它是一个正交矩阵，这意味着矩阵中的每一列都是一个单位向量。
It’s an orthogonal matrix and that means that each column in the matrix is a unit vector.

9
00:00:32,990 --> 00:00:39,519
因此，如果我添加两个正交矩阵，结果永远不会是正交矩阵，因为
So if I add two orthogonal matrices, the result will never be an orthogonal matrix because

10
00:00:39,519 --> 00:00:44,480
如果我能看到每一列，两个单位向量的总和，永远不会是一个单位
if I can see that each column, the sum of two unit vectors, can never ever be a unit

11
00:00:44,480 --> 00:00:45,480
向量。
vector.

12
00:00:45,480 --> 00:00:50,269
所以这不是我们可以用来插值旋转的策略。
So this is not a strategy we can use to interpolate rotations.

13
00:00:50,269 --> 00:00:54,819
我们需要考虑其他表示我们可以插值的旋转的方法。
We need to consider other ways of representing rotation that we can interpolate.

14
00:00:54,819 --> 00:01:00,679
因此，实现此目的的一种方法是回想一下这个插值公式适用于向量
So, one way to achieve this is to recall that this interpolation formula works for vectors

15
00:01:00,679 --> 00:01:05,640
我们可以用角度矢量表示旋转。
and we can represent a rotation in terms of a vector of angles.

16
00:01:05,640 --> 00:01:10,500
它可以是三个欧拉角或者它可以是三个滚动，俯仰，偏转角。
It can be three Euler angles or it could be three roll, pitch, yaw angles.

17
00:01:10,500 --> 00:01:16,740
因此，如果我们将这个角度向量视为符号Gamma，那么我们可以引入
So if we consider this vector of angles as the symbol Gamma, then we can introduce the

18
00:01:16,740 --> 00:01:22,440
初始角度，最终角度，然后我们可以插入中间角度。
initial angles, the final angles, and then we can interpolate the intermediate angles.

19
00:01:22,440 --> 00:01:26,490
如果我们的初始和最终方向是根据旋转矩阵给出的话
If our initial and final orientations are given in terms of rotation matrices, then

20
00:01:26,490 --> 00:01:31,850
我们将这两者转换为初始角度集和最终角度集。
we convert those two into initial set of angles and a final set of angles.

21
00:01:31,850 --> 00:01:37,820
我们插入中间角度，然后我们可以将它们转换回旋转矩阵
We interpolate the intermediate angles and we can convert those back to a rotation matrix

22
00:01:37,820 --> 00:01:39,240
如果我们这么渴望。
if we so desire.

23
00:01:39,240 --> 00:01:44,420
我们将使用我们刚才看到的函数jtraj来插入roll，
We’re going to use the function jtraj that we looked at a moment ago to interpolate roll,

24
00:01:44,420 --> 00:01:45,580
俯仰，偏航角度。
pitch, yaw angles.

25
00:01:45,580 --> 00:01:52,280
我将把结果放入工作空间变量X.调用jtraj函数。
I’m going to put the result into the workspace variable X. Invoke the jtraj function.

26
00:01:52,280 --> 00:01:57,500
我将在一组滚动，俯仰，偏航角度和滚动等于之间进行插值
I’m going to interpolate between a set of roll, pitch, yaw angles and roll equal to

27
00:01:57,500 --> 00:02:06,480
0和最后一组滚动，俯仰，偏航角等于2的负pi，再加上pi
0 and the final set of roll, pitch, yaw angles which are equal to minus pi on 2, plus pi

28
00:02:06,480 --> 00:02:09,410
在2和pi在4。
on 2 and pi on 4.

29
00:02:09,410 --> 00:02:15,620
而且，我将在一百多个步骤中进行插值。
And, I’m going to do this interpolation over a hundred time steps.

30
00:02:15,620 --> 00:02:20,420
结果是我们工作区中的一个新变量有100行，每行对应
The result is a new variable in our workspace that’s got 100 rows, each row corresponds

31
00:02:20,420 --> 00:02:21,420
到了一个时间步。
to a time step.

32
00:02:21,420 --> 00:02:28,810
并且，它有三列，列对应于滚动，俯仰和偏航角度。
And, it has got three columns and the columns correspond to the roll, pitch and yaw angles.

33
00:02:28,810 --> 00:02:32,600
我可以绘制这个滚动，俯仰，偏航角度与时间的关系。
I can plot this roll, pitch, yaw angles versus time.

34
00:02:32,600 --> 00:02:37,370
在这里，我们可以看到它们的样子，从初始值顺利移动到最终值
Here we can see what they look like, moving smoothly from the initial value to the final

35
00:02:37,370 --> 00:02:38,370
值。
value.

36
00:02:38,370 --> 00:02:44,569
现在，我们想要将矩阵X的每一行中的滚动，俯仰，偏航角度转换为a
Now, we want to convert the roll, pitch, yaw angle in each row of the matrix X in to a

37
00:02:44,569 --> 00:02:45,750
旋转矩阵。
rotation matrix.

38
00:02:45,750 --> 00:02:51,400
为此，我将使用我们之前查看过的rpy2r函数
And to do that, I’m going to use the rpy2r function that we looked at previously and

39
00:02:51,400 --> 00:02:52,569
我打算通过X.
I’m going to pass in X.

40
00:02:52,569 --> 00:02:58,819
在这种情况下，函数将执行的是它将转换此矩阵的每一行
And what the function will do in this case is it will convert every row of this matrix

41
00:02:58,819 --> 00:03:02,020
进入旋转矩阵。
into a rotation matrix.

42
00:03:02,020 --> 00:03:08,530
结果是旋转矩阵，但矩阵的尺寸为3x3x100。
The result is a rotation matrix, but the matrix has got dimensions of 3 x 3 x 100.

43
00:03:08,530 --> 00:03:11,600
所以我们可以把它想象成一堆旋转矩阵。
So we can think of it as a stack of rotation matrices.

44
00:03:11,600 --> 00:03:16,260
所以我们可以查看该堆栈中的第一个，它是一个旋转矩阵。
So we could look at the first one in that stack and it’s a rotation matrix.

45
00:03:16,260 --> 00:03:17,260
看起来像这样。
It looks like this.

46
00:03:17,260 --> 00:03:18,900
它是空转。
It’s null rotation.

47
00:03:18,900 --> 00:03:20,430
这是一个单位矩阵。
It’s a unit matrix.

48
00:03:20,430 --> 00:03:25,580
我可以看看堆栈中的第10个，它看起来像这样。
I could look at the 10th one in the stack and it looks something like this.

49
00:03:25,580 --> 00:03:29,390
所以R是一系列旋转矩阵。
So R is a sequence of rotation matrices.

50
00:03:29,390 --> 00:03:37,670
现在我可以将一系列旋转矩阵传递给函数tranimate。
Now I can pass a sequence of rotation matrices like that to the function tranimate.

51
00:03:37,670 --> 00:03:42,510
我们将看到的是一个动画，显示坐标系的方向发生变化
What we will see is an animation showing the orientation of the coordinate frame changing

52
00:03:42,510 --> 00:03:48,849
从滚动，俯仰，偏航角度指定的最初方向平滑到最终
smoothly from the initial orientation specified in terms of roll, pitch, yaw angles to a final

53
00:03:48,849 --> 00:03:54,990
方向也在滚动，俯仰，偏航角度方面指定。
orientation also specified in terms of roll, pitch, yaw angles.

54
00:03:54,990 --> 00:04:01,090
欧拉角和滚动，俯仰，偏航角表示为三个角度的矢量。
Euler angles and roll, pitch, yaw angles are represented as a vector of three angles.

55
00:04:01,090 --> 00:04:05,930
我们可以将这些向量的每个元素视为一个圆上的点和来自的路径
Each element of these vectors we can consider as a point on a circle and the path from the

56
00:04:05,930 --> 00:04:11,290
最终角度的初始角度是单位圆上的弧。
initial angle to the final angle is an arc on the unit circle.

57
00:04:11,290 --> 00:04:15,460
现在考虑我们有这个初始角度和最终角度的情况。
Consider now the case where we have this initial angle and this final angle.

58
00:04:15,460 --> 00:04:21,239
而天真的插值会将我们从初始角度移动到最终角度
And a naive interpolation would move us from the initial angle to the final angle the long

59
00:04:21,239 --> 00:04:23,470
围绕圈子的方式。
way around the circle.

60
00:04:23,470 --> 00:04:27,350
我们需要记住的角度是，总有两种方法可以从A到达
What we need to remember with angles is that there are always two ways to get from A to

61
00:04:27,350 --> 00:04:28,350
B.
B.

62
00:04:28,350 --> 00:04:31,990
可能还有很长的路要走，可能还有很短的路要走。
There is potentially the long way and there is potentially the short way.

63
00:04:31,990 --> 00:04:37,070
因此，当我们在角度序列向量中插入每个元素时，这很重要
So when we are interpolating each element in our angle sequence vector, it’s important

64
00:04:37,070 --> 00:04:40,720
我们选择最短的路径。
that we choose the shortest path.

65
00:04:40,720 --> 00:04:46,350
如果我们将角度视为时间的函数，则长路径在此处以蓝色显示。
If we look at the angle as a function of time, the long path is given here in blue.

66
00:04:46,350 --> 00:04:50,500
我们看到我们正在从2弧度移动到-2弧度。
We see we’re moving from 2 radians to -2 radians.

67
00:04:50,500 --> 00:04:55,970
而以红色显示的短路径移动通过pi弧度，pop的角度
Whereas the short path which is shown in red moves through an angle of pi radians, pops

68
00:04:55,970 --> 00:05:03,120
返回负π弧度，然后快速移动到值为-2的目标点B.
back at minus pi radians and then moves quickly to the destination point B of a value of -2

69
00:05:03,120 --> 00:05:04,120
弧度。
radians.

70
00:05:04,120 --> 00:05:09,290
早些时候，我们引入四元数，这是我们用来插值的方程式
Earlier, we introduce quaternions and this is the equation we used to interpolate between

71
00:05:09,290 --> 00:05:10,290
两个四元数。
two quaternions.

72
00:05:10,290 --> 00:05:15,780
再一次，它是S和S的函数，从0到1不等。
Once again, it’s a function of S and S varies from 0 to 1.

73
00:05:15,780 --> 00:05:20,810
而这个等式中的重要元素是Theta和Theta来自元素
And the important element in this equation is Theta and Theta is derived from the elements

74
00:05:20,810 --> 00:05:24,590
初始和最终四元数。
of the initial and final quaternion.

75
00:05:24,590 --> 00:05:31,260
这被称为球面线性插值，它是最短且最直接的路径
This is referred to as spherical linear interpolation and it is the shortest and most direct path

76
00:05:31,260 --> 00:05:34,120
在任何两个方向之间。
between any two orientations.

77
00:05:34,120 --> 00:05:40,650
并且它对应于围绕空间中的固定轴的恒定角速度。
And it corresponds to a constant angular velocity about a fixed axis in space.

78
00:05:40,650 --> 00:05:45,370
让我们创建一对四元数，我们将在它们之间进行插值。
Let’s create a pair of quaternions that we will interpolate between.

79
00:05:45,370 --> 00:05:49,410
第一个对应于空旋转。
The first one corresponds to a null rotation.

80
00:05:49,410 --> 00:05:52,540
我们看到它的矢量分量为0。
We see that it’s got a vector component of 0.

81
00:05:52,540 --> 00:05:59,261
第二个四元数表示通过pi在2上围绕x轴的旋转。
The second quaternion is a representation of a rotation about the x-axis by pi on 2.

82
00:05:59,261 --> 00:06:01,680
所以，我们将传递一个旋转矩阵。
So, we’re going to pass in a rotation matrix.

83
00:06:01,680 --> 00:06:05,200
四元数类将把它变成四元数。
The quaternion class is going to turn that into a quaternion.

84
00:06:05,200 --> 00:06:11,270
现在，我们的工作区中有两个四元数，一个对应于无旋转，一个对应
Now, there are two quaternions in our workspace, one corresponding to no rotation, one corresponding

85
00:06:11,270 --> 00:06:15,490
围绕x轴旋转90度。
to rotation of 90 degrees about the x-axis.

86
00:06:15,490 --> 00:06:18,820
要插入四元数，我们使用interp方法。
To interpolate quaternions, we use the interp method.

87
00:06:18,820 --> 00:06:21,350
我们将其应用于初始四元数。
We apply that to the initial quaternion.

88
00:06:21,350 --> 00:06:28,970
并且，第一个参数是最终的四元数，第二个参数是位置
And, the first argument is the final quaternion and the second argument is the position along

89
00:06:28,970 --> 00:06:29,970
一条轨迹。
a trajectory.

90
00:06:29,970 --> 00:06:32,400
所以0是轨迹上的第一个点。
So 0 is the first point on the trajectory.

91
00:06:32,400 --> 00:06:38,690
这是初始条件，初始四元数是空转。
That’s the initial condition, the initial quaternion which is the null rotation.

92
00:06:38,690 --> 00:06:44,639
我可以重复一遍，并要求插值中的最后一点，这等于
I can repeat that and ask for the final point in the interpolation and that is equal to

93
00:06:44,639 --> 00:06:47,100
第二个四元数。
the second quaternion.

94
00:06:47,100 --> 00:06:53,540
我现在可以问一个点在0.5之间的中间点，这就是插值的四元数。
I can ask now for a point that’s midway between 0.5 and this is the interpolated quaternion.

95
00:06:53,540 --> 00:06:59,419
当然，我可以使用R方法将其转回旋转矩阵。
And of course, I can turn that back in to a rotation matrix using the R method.

96
00:06:59,419 --> 00:07:05,870
现在，我们可能想比较不同类型的旋转插值的效果
Now, we might like to compare the effect of the different types of rotational interpolation

97
00:07:05,870 --> 00:07:07,130
这有点困难。
and that’s a little bit difficult.

98
00:07:07,130 --> 00:07:10,669
很难想象出特定的旋转。
It’s hard to visualize a particular rotation.

99
00:07:10,669 --> 00:07:16,270
但是，我们能够做到的一种方法是考虑旋转对特定向量的影响。
But, one way we can do it is to consider the effect of a rotation on a particular vector.

100
00:07:16,270 --> 00:07:22,199
所以在这里，我选择了x轴，我可以用向量1,0,0来表示。
So here, I have chosen the x-axis which I can represent by a vector 1, 0, 0.

101
00:07:22,199 --> 00:07:28,100
我可以将这三种不同的旋转序列应用于该向量。
And I can apply these three different rotation sequences to that vector.

102
00:07:28,100 --> 00:07:34,240
我可以插入初始和最终的欧拉角度，初始和最终的滚动，俯仰，
I can interpolate the initial and final Euler angles, the initial and final roll, pitch,

103
00:07:34,240 --> 00:07:40,000
偏航角或初始和最终四元数，它们由不同颜色显示
yaw angles or the initial and final quaternions and they are shown by the different colored

104
00:07:40,000 --> 00:07:42,490
这里绘制的零件在球体上。
parts plotted here on the sphere.

105
00:07:42,490 --> 00:07:47,080
以白色显示的四元数路径是最短且最直接的路径。
The quaternion path shown in white is the shortest and most direct path.

106
00:07:47,080 --> 00:07:51,780
我们可以看到滚动，俯仰，偏航插补路径已经明显偏离它。
We can see that the roll, pitch, yaw interpolation path has deviated significantly from it.

107
00:07:51,780 --> 00:07:57,199
它从一开始就采取了更为间接和更长的路径
It has taken a more indirect and longer path to get from the initial orientation to the

108
00:07:57,199 --> 00:07:58,840
最终定位。
final orientation.

109
00:07:58,840 --> 00:08:01,750
四元数插值是黄金标准。
Quaternion interpolation is the gold standard.

