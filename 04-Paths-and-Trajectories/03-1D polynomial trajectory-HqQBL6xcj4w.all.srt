1
00:00:03,530 --> 00:00:08,870
我们希望机器人的位置和方向随时间平滑变化
We want the position and orientation of our robot to vary smoothly with time as it’s

2
00:00:08,870 --> 00:00:11,429
遵循轨迹。
following the trajectory.

3
00:00:11,429 --> 00:00:13,309
出于多种原因，我们希望这样做。
We want to do this for a number of reasons.

4
00:00:13,309 --> 00:00:17,640
首先，我们希望减少机器人的最大加速度。
Firstly, we want to reduce the maximum acceleration on the robot.

5
00:00:17,640 --> 00:00:21,590
如果我们可以减少机器人的峰值加速度，那么我们可以减小尺寸
If we can reduce the peak acceleration of the robot, then we can reduce the size of

6
00:00:21,590 --> 00:00:23,790
所需的电机。
the motors that are required.

7
00:00:23,790 --> 00:00:28,860
如果轨迹是平滑的，那么它不会引起振动进入结构
If the trajectory is smooth, then it’s not going to induce vibrations into the structure

8
00:00:28,860 --> 00:00:29,860
机器人
of the robot.

9
00:00:29,860 --> 00:00:34,500
并且，对于非常非常大的机器人来说，这是一个重要的问题。但这提出了一个问题
And, this is an important issue with very, very large robots. But this raises the question

10
00:00:34,500 --> 00:00:35,860
什么是光滑的？
of what is smooth?

11
00:00:35,860 --> 00:00:44,050
现在，首先，我们希望机器人X的位置作为时间的函数是连续的，
Now, firstly, we want the position of the robot X as a function of time to be continuous,

12
00:00:44,050 --> 00:00:46,410
没有不连续性。
to have no discontinuities.

13
00:00:46,410 --> 00:00:50,769
我们还希望速度是连续的，加速度是连续的。
We also want the velocity to be continuous and the acceleration to be continuous.

14
00:00:50,769 --> 00:00:55,460
也许，我们希望三阶导数（称为混蛋）是连续的
And perhaps, we want the third derivative, which is referred to as jerk, to be continuous

15
00:00:55,460 --> 00:00:58,610
以及也许是第四衍生物等等。
as well and perhaps the fourth derivative and so on.

16
00:00:58,610 --> 00:01:05,320
我们有很多平滑的数学函数，正弦曲线，高斯函数和多项式
There are very many smooth mathematical functions, sinusoids, Gaussians and polynomials that we

17
00:01:05,320 --> 00:01:07,220
也许可以投入服务。
could perhaps press in to service.

18
00:01:07,220 --> 00:01:10,280
在机器人技术中，最常用的是多项式。
In robotics, it’s most common to use polynomials.

19
00:01:10,280 --> 00:01:15,840
并且，五次多项式，即五阶多项式，特别有用。
And, the quintic polynomial, that’s a fifth order polynomial, is particularly useful.

20
00:01:15,840 --> 00:01:20,250
五次多项式有六个系数，A，B，C，D，E和F.
The quintic polynomial has got six coefficients, A, B, C, D, E and F.

21
00:01:20,250 --> 00:01:25,240
我们将把案例S视为T的函数。所以，S就是这个位置
We’re going to consider the case S as a function of T. So, S is the position that

22
00:01:25,240 --> 00:01:32,340
我们对在时间0开始并在时间T结束的轨迹感兴趣。优点
we’re interested in over a trajectory which starts at time 0 and ends at time T. The advantage

23
00:01:32,340 --> 00:01:37,500
五次多项式的有六个系数，这意味着它有六个边界条件。
of the quintic polynomial is it got six coefficients and that means that it got six boundary conditions.

24
00:01:37,500 --> 00:01:43,979
这意味着我们可以独立设置位置，速度和加速度
It means that we can independently set the position, the velocity and the acceleration

25
00:01:43,979 --> 00:01:47,359
在开始时和结束时。
at the start time and at the end time.

26
00:01:47,359 --> 00:01:52,299
这里的表格显示了我们用来表示这些边界的符号的名称
This table here then shows the names of the symbols that we used to denote these boundary

27
00:01:52,299 --> 00:01:58,290
条件，初始和最终位置，初始和最终加速，初始和最终
conditions, initial and final position, initial and final acceleration, initial and final

28
00:01:58,290 --> 00:02:00,240
加速。
acceleration.

29
00:02:00,240 --> 00:02:04,750
这是我们的五次多项式，我可以计算它的导数
Here is our quintic polynomial again and I can compute its derivative with respect to

30
00:02:04,750 --> 00:02:05,750
时间。
time.

31
00:02:05,750 --> 00:02:10,820
因此，这是沿路径的速度，并且获得沿路径的加速度
So, this is the velocity along the path and the acceleration along the path is obtained

32
00:02:10,820 --> 00:02:13,390
另一种衍生物。
by yet another derivative.

33
00:02:13,390 --> 00:02:16,430
我可以在边界条件下替代。
I can substitute in the boundary conditions.

34
00:02:16,430 --> 00:02:19,940
当时间等于0时，我在这里有这些关系。
When time equals 0, I have these relationships here.

35
00:02:19,940 --> 00:02:24,610
而且，当时间等于T时，我在这里有这些关系。
And, when time equals T, I have these relationships

36
00:02:24,610 --> 00:02:29,520
现在，我可以用矩阵形式写出这六个约束方程。
Now, I can write these six constraint equations in matrix form.

37
00:02:29,520 --> 00:02:31,440
它看起来像这样。
It looks something like this.

38
00:02:31,440 --> 00:02:33,540
矩阵是6乘6。
The matrix is 6 by 6.

39
00:02:33,540 --> 00:02:36,840
它是正方形，这意味着我可以反转它。
It’s square, which means that I can invert it.

40
00:02:36,840 --> 00:02:41,319
现在，我所拥有的是一种给出多项式系数A到的关系
And now, what I have is a relationship that gives me the polynomial coefficients A through

41
00:02:41,319 --> 00:02:47,310
F就边界条件而言，矩阵基本上是一个函数
F in terms of the boundary conditions and a matrix which is essentially a function of

42
00:02:47,310 --> 00:02:50,269
轨迹时间和一些常数。
the trajectory time and some constants.

43
00:02:50,269 --> 00:02:54,590
让我们创建一个多项式轨迹，为此我将使用工具箱
Let’s create a polynomial trajectory and to do that I’m going to use the Toolbox

44
00:02:54,590 --> 00:02:59,670
函数tpoly，轨迹多项式的简写。
function tpoly, short hand for trajectory polynomial.

45
00:02:59,670 --> 00:03:05,200
多项式的初始值为0，最终值为1，有
The polynomial is going to have an initial value of 0, a final value of 1 and there are

46
00:03:05,200 --> 00:03:07,400
将是50个步骤。
going to be 50 time steps.

47
00:03:07,400 --> 00:03:10,819
在这里，我们可以看到轨迹。
And here, we can see the trajectory.

48
00:03:10,819 --> 00:03:17,630
我们可以看到S从0开始并平稳上升并以1的值结算。
We can see that S starts off at 0 and rises smoothly and settles out at a value of 1.

49
00:03:17,630 --> 00:03:24,340
我们可以看到速度从0开始并在0结束，加速也开始
We can see that the velocity starts at 0 and ends at 0 and the acceleration also starts

50
00:03:24,340 --> 00:03:26,640
并以0的值结束。
and ends at the value of 0.

51
00:03:26,640 --> 00:03:29,760
因此，改变最终条件。
And so, change the final condition.

52
00:03:29,760 --> 00:03:36,090
因此，它不是从0变为1，而是从0变为-1，我们可以看到多项式
So, instead of going from 0 to 1, it goes from 0 to -1 and we can see the polynomial

53
00:03:36,090 --> 00:03:39,650
现在正是如此。
now does exactly that.

54
00:03:39,650 --> 00:03:45,160
如果我提供输出参数，我可以从这个函数中获取变量S的值
I can get the value of the variable S from this function if I provide an output argument

55
00:03:45,160 --> 00:03:52,420
而不是生成一个图，它将返回矢量S.现在，我们在我们的工作区
and instead of producing a plot it will return the vector S. And now, we have in our workspace

56
00:03:52,420 --> 00:03:58,690
S是具有50行和1列的向量，表示在50的每一个处的S的值
S which is a vector with 50 rows and one column, represents the value of S at each of the 50

57
00:03:58,690 --> 00:04:00,909
时间步骤。
time steps.

58
00:04:00,909 --> 00:04:06,470
我也可以要求速度和加速度，我将把它们放入变量中
I can also ask for the velocity and the acceleration and I’m going put those in to the variables

59
00:04:06,470 --> 00:04:11,370
S点和S双点的SD和STD。
SD and STD for S dot and S double dot.

60
00:04:11,370 --> 00:04:17,079
而且，我在我的工作空间中创建了一些额外的矢量变量
And again, I have created in my work space some additional vector variables, each of

61
00:04:17,079 --> 00:04:18,810
他们有50行。
them has got 50 rows.

62
00:04:18,810 --> 00:04:21,840
行对应于时间步长。
The rows correspond to the time steps.

63
00:04:21,840 --> 00:04:26,539
您将在所有图中注意到初始速度和最终速度等于0。
You'll notice in all the plots that the initial and final velocities have been equal to 0.

64
00:04:26,539 --> 00:04:33,780
好吧，我可以通过为初始值提供显式值来覆盖它，我将会这样做
Well, I can override that by providing explicit values for the initial and I’m going to

65
00:04:33,780 --> 00:04:38,061
要求初始速度为0.5，我将要求最终速度
ask the initial velocity to be 0.5 and I’m going to ask for the final velocity

66
00:04:38,061 --> 00:04:39,410
等于0。
to be equal to 0.

67
00:04:39,410 --> 00:04:44,620
你可以看到的是，初始速度现在等于0.5，最终速度等于
What you can see is the initial velocity now is equal to 0.5, final velocity is equal to

68
00:04:44,620 --> 00:04:45,620
0。
0.

69
00:04:45,620 --> 00:04:49,670
但是，你会注意到的是，如果你看一下S的情节，你会发现它已经消失了
But, what you'll notice is if you look at the plot of S, you’ll see that it has gone

70
00:04:49,670 --> 00:04:53,210
从0到1，但它已大量超调。
from 0 to 1, but it has massively overshot.

71
00:04:53,210 --> 00:05:00,330
它已经上升到5，然后降低到所需的最终值。
It has gone up as high as 5 and then reduced to the desired final value.

72
00:05:00,330 --> 00:05:04,770
通过改变边界条件，我们已经大大改变了轨迹的形状。
By changing the boundary conditions, we have dramatically changed the shape of the trajectory.

73
00:05:04,770 --> 00:05:11,400
因此，我们已经看到五次多项式使得从0到0的平滑曲线变得漂亮
So, we have seen that the quintic polynomial makes nice, smooth curves moving from 0 to

74
00:05:11,400 --> 00:05:17,330
在50个时间单位的时间内，我们可以看到速度是平滑的和加速度
1 over a period of 50 time units and we can see that the velocity is smooth and the acceleration

75
00:05:17,330 --> 00:05:18,330
很顺利
is smooth.

76
00:05:18,330 --> 00:05:20,190
但是，这里有一点问题。
But, there’s a bit of a problem here.

77
00:05:20,190 --> 00:05:26,870
那就是机器人进行的峰值速度值为0.038单位，
That is that the peak velocity that the robot undertakes has got a value of 0.038 units,

78
00:05:26,870 --> 00:05:30,990
但是路径上的平均速度要小得多。
but the average velocity over the path is much, much less.

79
00:05:30,990 --> 00:05:32,850
这只是.02。
It’s only .02.

80
00:05:32,850 --> 00:05:37,020
平均而言，我们只能达到此路径峰值速度的52％。
On average, we’re only going at 52% of the peak velocity for this path.

81
00:05:37,020 --> 00:05:41,820
因此，这意味着对于大多数路径而言，电机不能尽可能地工作
So, that means that for most of the path, the motor isn't working as hard as it could

82
00:05:41,820 --> 00:05:42,820
是。
be.

83
00:05:42,820 --> 00:05:47,500
这意味着我们必须安装一台可以达到这个峰值速度的电机，但主要是我们
It means that we have to install a motor which can go at this peak speed but mostly we’re

84
00:05:47,500 --> 00:05:48,810
没有使用那个容量。
not using that capacity.

85
00:05:48,810 --> 00:05:50,240
我们在浪费表现。
We’re wasting performance.

86
00:05:50,240 --> 00:05:54,150
这也意味着我们需要更长时间才能到达我们想去的地方。
It also means that it’s going to take us longer to get where we want to go.

