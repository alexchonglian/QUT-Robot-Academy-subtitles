1
00:00:03,699 --> 00:00:08,120
让我们考虑试图在人群中找到一张脸的问题，特别是
Let’s consider the problem of trying to find a face in a crowd and, in particular,

2
00:00:08,120 --> 00:00:15,540
我想找到机器人Bender的脸。他在这里：他躲在Dalek后面
I want to find the face of the robot Bender. Here he is: he is hiding behind a Dalek and

3
00:00:15,540 --> 00:00:20,669
站在夏娃旁边。因此，我们不得不扫描人群来找Bender，让我们来吧
standing next to Eve. So rather than us having to scan the crowd to find Bender, let’s

4
00:00:20,669 --> 00:00:25,430
看看我们是否可以自动完成任务。我们将使用空间算子方法
see if we can automate the task. We are going to use the spatial operator approach

5
00:00:25,430 --> 00:00:30,849
为了解决这个问题。我们要做的是每个输入窗口
in order to solve this problem. What we are going to do is for every input window we are

6
00:00:30,849 --> 00:00:37,340
将它与模板图像进行比较，模板是图像，模式
going to compare it with a template image, the template being the image, the pattern

7
00:00:37,340 --> 00:00:42,370
我们正在寻找，我们的功能现在是一个相似功能。我们要看
we are looking for and our function now is a similarity function. We are going to look

8
00:00:42,370 --> 00:00:47,970
在图像左侧行进的特定输入窗口之间的相似性
at the similarity between the particular input window which marches across the image left

9
00:00:47,970 --> 00:00:53,810
向右，从上到下。每个输入窗口，我们都要将它与我们的模板进行比较
to right, top to bottom. Every input window, we are going to compare it with our template

10
00:00:53,810 --> 00:00:59,250
并且相似性得分将被放入输出图像中。所以模板会
and the similarity score is going to be placed into the output image. So the template will

11
00:00:59,250 --> 00:01:04,180
作为Bender的面孔，我们将比较Bender在每一个方面的表情
be the face of Bender and we are going to compare the face of Bender at every single

12
00:01:04,180 --> 00:01:09,399
整个场景的位置。那么我们如何比较两个图像，我们如何判断一个特定的图像
location across the scene. So how do we compare two images, how do we tell that a particular

13
00:01:09,399 --> 00:01:14,210
输入窗口W看起来像Bender还是看起来不像Bender？
input window W looks like Bender or doesn’t look like Bender?

14
00:01:14,210 --> 00:01:20,560
要做到这一点，我们需要一个图像相似性度量，最简单的一个称为总和
To do this we need an image similarity measure and the simplest one is called the sum of

15
00:01:20,560 --> 00:01:28,030
绝对差异，有时缩写为SAD或sad（），而且我们非常简单地采用了
absolute differences, sometimes abbreviated to SAD or sad() and quite simply we take the

16
00:01:28,030 --> 00:01:33,189
我们试图比较的两个图像中相应像素之间的差异。
difference between the corresponding pixels in the two images that we are trying to compare.

17
00:01:33,189 --> 00:01:37,709
当然，它们必须是相同的大小，取其绝对值并总结。因此，如果
Of course, they must be the same size, take their absolute value and sum it up. So if

18
00:01:37,709 --> 00:01:43,270
图像相同，相似性度量的值为0.如果它们不相似，
the images are identical, the similarity measure will have a value of 0. If they are dissimilar,

19
00:01:43,270 --> 00:01:49,779
S的值大于0.所以0表示完美匹配;一个大的价值意味着一个不太完美
S will have a value greater than 0. So 0 means perfect match; a big value means a less perfect

20
00:01:49,779 --> 00:01:56,670
比赛。一个非常类似的方法是操作符调用ssd（），平方差的和，和
match. A quite similar approach is the operator called ssd(), sum of square differences, and

21
00:01:56,670 --> 00:02:02,700
而不是使用绝对值操作，我们采取正方形的总和。
instead of using the absolute value operation we are taking the sum of the squares.

22
00:02:02,700 --> 00:02:09,160
另一个衡量标准是零均值归一化互相关，通常缩写为
Another measure is the zero - mean normalised cross correlation, commonly abbreviated to

23
00:02:09,160 --> 00:02:15,629
ZNCC（）。它看起来要复杂得多，但它比这两个简单有一些优点
zncc(). It looks much more complicated, but it has some advantages over the two simple

24
00:02:15,629 --> 00:02:23,110
以上措施。zncc（）度量从-1到+1变化。+1表示图像是
measures above. The zncc() measure varies from -1 to +1. +1 means that the images are

25
00:02:23,110 --> 00:02:29,519
相同和-1表示一个图像是另一个图像的负像。0意味着
identical and -1 means that one image is the negative of the other one. 0 means that the

26
00:02:29,519 --> 00:02:35,000
两幅图像的相关性不是很好。通常，考虑高于0.8的值
two images are not very well correlated. Typically, a value above 0.8 is considered

27
00:02:35,000 --> 00:02:41,640
是一个合理的比赛。在这里，我们重新审视原始拼图，Bender突出显示。
to be a reasonable match. Here we revisit the original puzzle and there is Bender highlighted.

28
00:02:41,640 --> 00:02:47,019
所以我们首先需要创建模板，所以在这里我将Bender切碎了，
So we first of all need to create the template, so here I have chopped Bender out of the scene,

29
00:02:47,019 --> 00:02:50,540
所以它主要是本德尔和他的一些邻居。
so it is mostly Bender and a few of his neighbours as well.

30
00:02:50,540 --> 00:02:56,129
然后我要做的是使用类似Photoshop的程序来删除所有的
And then what I am going to do is to use a Photoshop-like program to remove all of the

31
00:02:56,129 --> 00:02:59,750
那个场景中没有Bender的机器人。我将尽可能多地放大
robots in that scene that are not Bender. I am going to zoom in as much as I can on

32
00:02:59,750 --> 00:03:04,650
他的头部和所有其他我不感兴趣的机器人变黑了。所以这个
his head and blacken out all of the other robots that I am not interested in. So this

33
00:03:04,650 --> 00:03:10,310
是模板，这是我要在图像中寻找的模式。
is the template, this is the pattern that I am going to go looking for in the image.

34
00:03:10,310 --> 00:03:14,500
我要做的第一件事是将人群场景加载到工作空间变量中
The first thing I am going to do is load the crowd scene into a workspace variable which

35
00:03:14,500 --> 00:03:20,099
我打电话给人群。我打算从文件wheres_walle.png加载它，它是一个
I am going to call crowd. I am going to load it from the file wheres_walle.png, it is a

36
00:03:20,099 --> 00:03:25,569
PNG格式文件。我想将彩色图像转换为灰度，我想转换
PNG format file. I want to convert the colour image to grey scale and I want to convert

37
00:03:25,569 --> 00:03:33,310
所有像素都是双精度值。也就是说，它们介于0和1之间
all the pixels to double precision values. That is, they lie between 0 and 1 and then

38
00:03:33,310 --> 00:03:34,690
让我们展示一下。
let’s display that.

39
00:03:38,329 --> 00:03:45,629
在那里我们看到人群场景，接下来我将加载机器人Bender的图像
And there we see the crowd scene, next I am going to load an image of the robot Bender

40
00:03:45,629 --> 00:03:53,420
那也是PNG文件;要将其转换为双倍精度，我已加载
and that is in a PNG file also; going to convert that to double precision and I have loaded

41
00:03:53,420 --> 00:03:57,530
进入工作区变量Bender。我们可以看到它是一个非常小的图像;它
that into the workspace variable Bender. We can see that it is a very small image; it

42
00:03:57,530 --> 00:04:04,990
只有55行像素和41列像素。让我们在新窗口中显示。
has only got 55 rows of pixels and 41 columns of pixels. Let’s display that in a new window.

43
00:04:08,920 --> 00:04:11,480
那是我们的模板。所以问题来了
And that is our template. So the problem to

44
00:04:11,480 --> 00:04:19,209
手就是在每个可能的位置寻找特定的模板模式
hand is to look for that particular template pattern in every possible location in the

45
00:04:19,209 --> 00:04:23,200
输入图像。所以这是一个非常大的搜索问题。要做到这一点，我将使用
input image. So this is a really big searching problem. To do that I am going to use the

46
00:04:23,200 --> 00:04:33,580
工具箱函数称为相似性，我传递模板Bender的图像
tool box function called isimilarity and I pass in the image of Bender, the template

47
00:04:33,580 --> 00:04:38,780
我们正在寻找，我正在寻找模板的场景和最后一个
that we are looking for, the scene in which I am searching for the template and the last

48
00:04:38,780 --> 00:04:43,590
论证是相似性度量-我们刚刚讨论了相似性度量-我就是
argument is the similarity measure — we just talked about similarity measures — and I am

49
00:04:43,590 --> 00:04:50,840
要使用zncc度量，零均值归一化互相关，这可能是Rolls
going to use the zncc measure, zero mean normalise cross correlation, which is perhaps the Rolls

50
00:04:50,840 --> 00:04:57,350
罗伊斯的图像相似性测量，我将在我相当不错的计算
Royce of image similarity measures, and I am going to compute that on my rather nice

51
00:04:57,350 --> 00:05:01,410
笔记本电脑。这个计算需要大约90秒，所以我们将跳过
laptop. This calculation takes about 90 something seconds so we are going to skip through to

52
00:05:01,410 --> 00:05:08,800
结束。太好了，我们完成了。所以我们计算了变量S.它是一个大矩阵，我们
the end. Great, we are done. So we have computed the variable S. It is a large matrix and we

53
00:05:08,800 --> 00:05:15,560
可以认为它是一个图像，并将其显示为这样，这是一个相似图像。
can consider it to be an image and display it as such and this is a similarity image.

54
00:05:15,560 --> 00:05:20,310
现在我们在这里有这个相似性度量，所以让我们点击几点
Now what we have here is this similarity measure, so let’s just click around in a few points

55
00:05:20,310 --> 00:05:23,980
我们可以看到，我点击的这些像素的相似度非常低
and we can see that these pixels that I am clicking on have got quite low similarity

56
00:05:23,980 --> 00:05:28,520
测量。这意味着我点击模板的地方根本不适合。
measure. It means that where I have clicked the template is not at all a good fit.

57
00:05:28,520 --> 00:05:34,800
在这里，我们可以看到一些更大的相似值，0.44,0.47。
Down here we can see some similarity values that are a little bit bigger, 0.44, 0.47.

58
00:05:34,800 --> 00:05:40,210
最大值相似度为1.因此，在此位置可能是模板
The maximum value similarity is 1. So at this location it is possible that the template

59
00:05:40,210 --> 00:05:45,140
存在，但它不是一个奇妙的契合。我们可以看到一些很暗的地方
exists but it is not a marvellous fit. We can see some places that are quite dark where

60
00:05:45,140 --> 00:05:50,580
它肯定是非常差的合适。实际上，这是一种消极的相似性度量。但在某个地方
it is certainly is very poor fit. In fact it is a negative similarity measure. But somewhere

61
00:05:50,580 --> 00:05:56,700
在这里会有一些非常明亮的像素，代表模板最适合的位置。
in here there will be some very bright pixels which represent where the template fits best.

62
00:05:56,700 --> 00:06:01,160
所以这是一个非常大的矩阵：这里有近百万个数字和什么
So this is a very large matrix: there’s almost a million numbers in here and what

63
00:06:01,160 --> 00:06:06,280
我们要做的是找到这个矩阵中最大的数字。
we have to do is to find the biggest number within this matrix.

64
00:06:06,280 --> 00:06:13,170
现在我们有一个工具箱功能，它可以为我们这样做，它就像这样使用。
Now we have a tool box function which can do that for us and it’s used like this.

65
00:06:13,170 --> 00:06:17,370
所以它有两个输出变量，我会在一瞬间解释它们。
So it has got two output variables and I will explain them in just a moment.

66
00:06:17,370 --> 00:06:24,010
该函数称为peak2，我们传入相似图像。传递参数
The function is called peak2 and we pass in the similarity image. Pass in the argument

67
00:06:24,010 --> 00:06:30,390
一个说我们想要找到最亮的像素，即最亮的像素
one which is saying that we want to find the brightest pixel, that is, the brightest pixel

68
00:06:30,390 --> 00:06:35,460
相对于距离它一个像素的所有像素。所以它就像，它是
with respect to all of the pixels who are one pixel away from it. So it is like, it’s

69
00:06:35,460 --> 00:06:42,220
在一个非常本地的区域内最明亮的，让我们要求五个最亮的山峰
the brightest within a very local region and let’s ask for the five brightest peaks in

70
00:06:42,220 --> 00:06:47,090
降序排列。所以这是最亮的像素，第二个最亮的像素等等。
descending order. So that’s the brightest pixel, the second brightest pixel and so on.

71
00:06:47,090 --> 00:06:54,060
花一点时间来计算;我们看到的是我们计算了两个输出变量，
Takes a moment to compute; and what we see is we have computed two output variables,

72
00:06:54,060 --> 00:07:00,960
现在是第一个，我们称之为MX或者最大的那个是最亮的像素的值
now the first one, the one we call MX or maximum is the value of that brightest pixel and the

73
00:07:00,960 --> 00:07:06,020
矩阵P中的对应列是该最亮像素的坐标。
corresponding column in the matrix P is the coordinate of that brightest pixel.

74
00:07:06,020 --> 00:07:10,840
所以它所说的是在相似图像中它具有最大的相似性
So what it is saying is within that similarity image the greatest similarity that it has

75
00:07:10,840 --> 00:07:18,800
找到的值为0.6107，它出现在U坐标331和V坐标处
found has got a value of 0.6107 and it occurs at a U coordinate of 331 and a V coordinate

76
00:07:18,800 --> 00:07:28,310
第二个最佳拟合的相似度为0.5580，我们可以看到它的坐标，第三个
of 364. The second best fit has got a similarity of 0.5580 and we can see its coordinate, third

77
00:07:28,310 --> 00:07:33,210
最佳合身，第四最佳合身，第五最佳合身等。
best fit, fourth best fit, fifth best fit and so on.

78
00:07:33,210 --> 00:07:40,310
因此，为了使其可视化，我们可以做的是选择原始图像和什么
So in order to visualise that, what we can do is to select the original image and what

79
00:07:40,310 --> 00:07:47,670
我要做的是在这张图片上绘制一些圆圈，表明我们在哪里发现这些圆圈
I am going to do is to plot some circles on this image that indicate where we found these

80
00:07:47,670 --> 00:07:52,320
很合适。所以这是对这个函数的很多论据，但基本上就是说
good fits. So this is rather a lot of arguments to this function, but basically it is saying

81
00:07:52,320 --> 00:07:58,450
绘制一个半径为30像素的圆，并绘制其中每个圆的一个圆
plot a circle of radius 30 pixels and plot one of these circles for every column in the

82
00:07:58,450 --> 00:08:03,940
矩阵P.所以它将绘制5个圆圈。我希望圆圈是蓝色的。一世
matrix P. So it is going to plot 5 circles. I want the circles to be coloured blue. I

83
00:08:03,940 --> 00:08:09,740
希望它们是半透明的，所以我们将这些圆的alpha值设置为0.3，这就是
want them to be translucent, so we set the alpha value for these circles to 0.3, which

84
00:08:09,740 --> 00:08:15,140
意味着它们是通过圆圈看到的，并且它们没有任何边缘颜色
means that they are see through circles and that they do not have any edge colour and

85
00:08:15,140 --> 00:08:21,620
在这里，我们认为机器人Bender所在的每个地方都有一个蓝色圆圈。
here we go, there is a blue circle on every place where we think the robot Bender is.

86
00:08:21,620 --> 00:08:28,700
现在让我们也指出选择的等级;另一个相当复杂的功能
Now let’s also indicate the rank of the selections; another rather complex function

87
00:08:28,700 --> 00:08:34,740
打电话，但它基本上说每个点P，我想要一个序号
call, but it’s basically saying for every point P, I want to put a sequential number

88
00:08:34,740 --> 00:08:42,280
在粗体字体文字大小36，黄色书写，我们去，所以我们可以看到第一个最好的
in a bold font text size 36, in yellow writing and here we go, so we can see the first best

89
00:08:42,280 --> 00:08:47,250
适合，第二最佳，第三，第四和第五，我们可以看到蓝色圆圈与
fit, second best fit, third, fourth and fifth and we can see that the blue circle with the

90
00:08:47,250 --> 00:08:51,900
旁边的第一个确实是机器人本德......我们正在仔细观察;
number one next to it is indeed the robot Bender … we are looking closely enough;

91
00:08:51,900 --> 00:08:54,890
我们可以看到班德在那里的幸福面孔。
we can see Bender’s happy face there.

92
00:08:54,890 --> 00:09:01,150
我们将在我们找到机器人弯曲机的位置周围提取人群场景的区域。
We are going to extract a region of the crowd scene around where we located the robot Bender.

93
00:09:01,150 --> 00:09:05,830
我们将通过使用iroi函数，感兴趣区域函数来实现。
We are going to do that by using the iroi function, the region of interest function.

94
00:09:05,830 --> 00:09:11,180
并传递整个图像，人群图像，我们将通过坐标
And to pass in the entire image, the crowd image, we are going to pass in the coordinate

95
00:09:11,180 --> 00:09:18,890
模板具有最佳匹配的点，即矩阵的第一列
of the point where the template had the best match, that is, the first column of the matrix

96
00:09:18,890 --> 00:09:25,320
P.矩阵P的每列表示图像中拟合模板的点
P. Each column of the matrix P represents a point in the image where the template fitted

97
00:09:25,320 --> 00:09:30,000
无论是第一好，第二好等等。所以第一列就是了
either first best, second best and so on. So the first column is the point where the

98
00:09:30,000 --> 00:09:35,170
模板拟合最好，我们将提取一个50像素正方形的区域
template fitted the best and we are going to extract a region which is 50 pixels square

99
00:09:35,170 --> 00:09:41,150
所以在这里我们看到了人群场景的区域，我们在那里发现了机器人Bender和
and so here we see the region of the crowd scene where we found the robot Bender and

100
00:09:41,150 --> 00:09:45,400
在右边，我们看到了Bender的模板。我们可以看到这些地区并不完全
on the right we see the template of Bender. We can see that these regions are not quite

101
00:09:45,400 --> 00:09:51,130
相同。但是我们在左边显示了模板适合的像素图案
the same. But we are showing on the left a pattern of pixels where the template fitted

102
00:09:51,130 --> 00:09:54,830
最好的。所以我所做的就是拿原版
the best. So what I have done is to take the original

103
00:09:54,830 --> 00:09:59,220
人群场景的图像，我已经切出了一堆像Bender的脸的像素
image of the crowd scene and I have cut out a bunch of pixels which has Bender’s face

104
00:09:59,220 --> 00:10:04,330
在其中，我已经进入Photoshop并且我已经将一些背景涂黑了
in it, I have gone into Photoshop and I have blacked out some of the background which is

105
00:10:04,330 --> 00:10:07,760
不相关-他们不是Bender的一部分，他们实际上是机器人的一部分
not relevant — they are not part of Bender, they are actually part of the robots around

106
00:10:07,760 --> 00:10:13,250
Bender-这就是我找到模板的方式。因此，如果我将此模板应用于其他模板
Bender — and that is how I found the template. So if I applied this template to a different

107
00:10:13,250 --> 00:10:17,980
机器人人群场景也许，在人群中，班德没有雪茄;也许
robot crowd scene and perhaps, in that crowd scene, Bender didn’t have a cigar; perhaps

108
00:10:17,980 --> 00:10:22,050
他正朝另一个方向看;也许他离镜头越来越近了
he was looking in another direction; perhaps he was closer to the camera and appeared to

109
00:10:22,050 --> 00:10:26,420
更大，或者他离得更远，看起来更小。然后是一个简单的模板
be bigger, or he was further away and appeared to be smaller. Then a simple-minded template

110
00:10:26,420 --> 00:10:30,380
像这样的匹配技术不会特别好用。
matching technique like this is not going to work particularly well.

